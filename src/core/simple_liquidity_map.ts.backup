/**
 * ====================================================================
 * Simple Liquidity Map - ULTRA SIMPLIFIED
 * ====================================================================
 * Basic cash flow aggregation from ACTUS contracts
 * NO Basel3, NO HQLA classification, NO haircuts - just simple totals
 * ====================================================================
 */

interface Event {
  time: string;
  payoff: number;
}

interface Contract {
  id: string;
  contractId: string;
  type: string;
  events: Event[];
}

/**
 * Simple mapping function - just aggregate cash flows by period
 * âœ… ULTRA SIMPLE: No classifications, no haircuts, just basic aggregation
 */
function mapJsonToSimpleLiquidityData(
  jsonData: Contract[]
): { inflow: number[][]; outflow: number[][]; monthsCount: number } {

  if (jsonData.length === 0) {
    return { inflow: [], outflow: [], monthsCount: 0 };
  }

  // Find date range from all events
  const allDates = jsonData.flatMap(contract => 
    contract.events.map(event => new Date(event.time))
  );
  
  const minDate = new Date(Math.min(...allDates.map(date => date.getTime())));
  const maxDate = new Date(Math.max(...allDates.map(date => date.getTime())));

  // Calculate months span (25 months from ACTUS post-processing)
  const monthsCount = Math.max(
    (maxDate.getFullYear() - minDate.getFullYear()) * 12 + 
    (maxDate.getMonth() - minDate.getMonth()) + 1,
    1
  );
   
  console.log(`ðŸ“Š Simple mapping: ${monthsCount} months from ${minDate.toISOString().substring(0, 7)} to ${maxDate.toISOString().substring(0, 7)}`);
  
  // Initialize arrays for each month
  const inflow: number[][] = Array.from({ length: monthsCount }, () => []);
  const outflow: number[][] = Array.from({ length: monthsCount }, () => []);
  
  // âœ… SIMPLE: Just categorize cash flows by period - no complexity
  jsonData.forEach((contract: Contract) => {
    contract.events.forEach((event: Event) => {
      const date = new Date(event.time);
      const monthIndex = (date.getFullYear() - minDate.getFullYear()) * 12 + 
                        (date.getMonth() - minDate.getMonth());
      
      // Simple classification: positive = inflow, negative = outflow
      if (event.payoff > 0) {
        inflow[monthIndex].push(event.payoff);
      } else if (event.payoff < 0) {
        outflow[monthIndex].push(Math.abs(event.payoff));
      }
      // Zero payoffs are ignored
    });
  });

  // Log summary
  const totalInflows = inflow.flat().reduce((a, b) => a + b, 0);
  const totalOutflows = outflow.flat().reduce((a, b) => a + b, 0);
  
  console.log(`ðŸ“Š Simple aggregation results:`);
  console.log(`   - Total inflows: ${totalInflows.toFixed(2)}`);
  console.log(`   - Total outflows: ${totalOutflows.toFixed(2)}`);
  console.log(`   - Net flow: ${(totalInflows - totalOutflows).toFixed(2)}`);

  return { inflow, outflow, monthsCount };
}

/**
 * Load and process JSON data using simple mapping
 */
function loadAndProcessSimpleLiquidityData(
  jsonData: string
): { inflow: number[][]; outflow: number[][]; monthsCount: number } {
  const parsedData: Contract[] = JSON.parse(jsonData);
  console.log(`ðŸ“Š Processing ${parsedData.length} contracts for simple liquidity mapping...`);
  return mapJsonToSimpleLiquidityData(parsedData);
}

export { mapJsonToSimpleLiquidityData, loadAndProcessSimpleLiquidityData };
