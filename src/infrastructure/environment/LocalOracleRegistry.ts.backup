import { LocalBlockchain, Mina, PrivateKey, PublicKey, UInt64 } from 'o1js';

/**
 * Oracle Registry implementation for LOCAL environment using O1JS LocalBlockchain
 * 
 * Key Features:
 * - Uses O1JS LocalBlockchain with pre-funded test accounts
 * - No session persistence (O1JS compliant)
 * - Fast setup for development iteration
 * - Single-process deployment and verification
 */
export class LocalOracleRegistry {
  private localBlockchain: any;
  private testAccounts: any[];
  private config: any;
  private isInitialized: boolean = false;
  
  constructor(config: any) {
    this.config = config;
  }
  
  async initialize(): Promise<void> {
    console.log('üîß Initializing LocalOracleRegistry...');
    console.log('üìç Environment: LOCAL (O1JS LocalBlockchain)');
    
    // Setup local blockchain with test accounts (O1JS pattern)
    this.localBlockchain = await Mina.LocalBlockchain({ 
      proofsEnabled: this.config.network.proofsEnabled ?? true,
      enforceTransactionLimits: false // Disable for faster testing
    });
    
    Mina.setActiveInstance(this.localBlockchain);
    this.testAccounts = this.localBlockchain.testAccounts;
    this.isInitialized = true;
    
    console.log(`‚úÖ LocalBlockchain initialized with ${this.testAccounts.length} test accounts`);
    console.log(`üí∞ Each account funded with ~10 MINA (${this.config.network.testAccounts.defaultBalance} nanomina)`);
    console.log('üèóÔ∏è Ready for contract deployment and verification');
    
    // Log available oracle accounts
    this.logOracleAccounts();
  }
  
  private logOracleAccounts(): void {
    console.log('\nüìã Available Oracle Accounts:');
    for (const [oracleType, oracleConfig] of Object.entries(this.config.oracles)) {
      const config = oracleConfig as any;
      const deployerAccount = this.testAccounts[config.deployerAccountIndex];
      const senderAccount = this.testAccounts[config.senderAccountIndex];
      
      console.log(`‚úÖ ${oracleType}:`);
      console.log(`   Deployer [${config.deployerAccountIndex}]: ${deployerAccount.key.toPublicKey().toBase58()}`);
      console.log(`   Sender   [${config.senderAccountIndex}]: ${senderAccount.key.toPublicKey().toBase58()}`);
    }
    console.log('');
  }
  
  getOracleAccount(oracleType: string, accountType: 'deployer' | 'sender'): {
    privateKey: PrivateKey;
    publicKey: PublicKey;
    index: number;
  } {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized. Call initialize() first.');
    }
    
    const oracleConfig = this.config.oracles[oracleType];
    if (!oracleConfig) {
      throw new Error(`Oracle ${oracleType} not found in LOCAL config. Available: ${Object.keys(this.config.oracles).join(', ')}`);
    }
    
    const indexKey = accountType === 'deployer' ? 'deployerAccountIndex' : 'senderAccountIndex';
    const accountIndex = oracleConfig[indexKey];
    
    if (accountIndex >= this.testAccounts.length) {
      throw new Error(`Account index ${accountIndex} exceeds available test accounts (${this.testAccounts.length})`);
    }
    
    const testAccount = this.testAccounts[accountIndex];
    
    return {
      privateKey: testAccount.key,
      publicKey: testAccount.key.toPublicKey(),
      index: accountIndex
    };
  }
  
  async getBalance(publicKey: PublicKey): Promise<number> {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized');
    }
    
    try {
      const account = Mina.getAccount(publicKey);
      return Number(account.balance.toBigInt()) / 1e9; // Convert to MINA
    } catch (error) {
      console.log(`‚ö†Ô∏è Could not fetch balance for ${publicKey.toBase58()}: ${error}`);
      return 0;
    }
  }
  
  getEnvironment(): string {
    return 'LOCAL';
  }
  
  isLocalEnvironment(): boolean {
    return true;
  }
  
  isNetworkEnvironment(): boolean {
    return false;
  }
  
  getTestAccounts() {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized');
    }
    return this.testAccounts;
  }
  
  getLocalBlockchain() {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized');
    }
    return this.localBlockchain;
  }
  
  /**
   * Get fee payer account (uses first test account)
   */
  getFeePayerAccount(): { privateKey: PrivateKey; publicKey: PublicKey } {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized');
    }
    
    const feePayerAccount = this.testAccounts[0];
    return {
      privateKey: feePayerAccount.key,
      publicKey: feePayerAccount.key.toPublicKey()
    };
  }
  
  /**
   * Log current account balances for debugging
   */
  async logAccountBalances(): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('LocalOracleRegistry not initialized');
    }
    
    console.log('\nüí∞ Current Account Balances:');
    for (let i = 0; i < this.testAccounts.length; i++) {
      const account = this.testAccounts[i];
      const balance = await this.getBalance(account.key.toPublicKey());
      console.log(`   Account[${i}]: ${balance.toFixed(3)} MINA`);
    }
    console.log('');
  }
}